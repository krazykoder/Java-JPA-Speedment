package com.company.userdb.userdb.userdb.user.generated;

import com.company.userdb.userdb.userdb.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.userdb.userdb.userdb.user.User}-interface representing entities
 * of the {@code user}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getId()} method.
     */
    IntField<User, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        User::getId,
        User::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUsername()} method.
     */
    StringField<User, String> USERNAME = DatastoreFields.createStringField(
        Identifier.USERNAME,
        User::getUsername,
        User::setUsername,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFirstName()} method.
     */
    StringField<User, String> FIRST_NAME = DatastoreFields.createStringField(
        Identifier.FIRST_NAME,
        o -> OptionalUtil.unwrap(o.getFirstName()),
        User::setFirstName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getLastName()} method.
     */
    StringField<User, String> LAST_NAME = DatastoreFields.createStringField(
        Identifier.LAST_NAME,
        o -> OptionalUtil.unwrap(o.getLastName()),
        User::setLastName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getEmail()} method.
     */
    StringField<User, String> EMAIL = DatastoreFields.createStringField(
        Identifier.EMAIL,
        User::getEmail,
        User::setEmail,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPassword()} method.
     */
    StringField<User, String> PASSWORD = DatastoreFields.createStringField(
        Identifier.PASSWORD,
        User::getPassword,
        User::setPassword,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this User. The id field corresponds to the database
     * column userdb.userdb.user.id.
     * 
     * @return the id of this User
     */
    int getId();
    
    /**
     * Returns the username of this User. The username field corresponds to the
     * database column userdb.userdb.user.username.
     * 
     * @return the username of this User
     */
    String getUsername();
    
    /**
     * Returns the firstName of this User. The firstName field corresponds to
     * the database column userdb.userdb.user.firstName.
     * 
     * @return the firstName of this User
     */
    Optional<String> getFirstName();
    
    /**
     * Returns the lastName of this User. The lastName field corresponds to the
     * database column userdb.userdb.user.lastName.
     * 
     * @return the lastName of this User
     */
    Optional<String> getLastName();
    
    /**
     * Returns the email of this User. The email field corresponds to the
     * database column userdb.userdb.user.email.
     * 
     * @return the email of this User
     */
    String getEmail();
    
    /**
     * Returns the password of this User. The password field corresponds to the
     * database column userdb.userdb.user.password.
     * 
     * @return the password of this User
     */
    String getPassword();
    
    /**
     * Sets the id of this User. The id field corresponds to the database column
     * userdb.userdb.user.id.
     * 
     * @param id to set of this User
     * @return   this User instance
     */
    User setId(int id);
    
    /**
     * Sets the username of this User. The username field corresponds to the
     * database column userdb.userdb.user.username.
     * 
     * @param username to set of this User
     * @return         this User instance
     */
    User setUsername(String username);
    
    /**
     * Sets the firstName of this User. The firstName field corresponds to the
     * database column userdb.userdb.user.firstName.
     * 
     * @param firstName to set of this User
     * @return          this User instance
     */
    User setFirstName(String firstName);
    
    /**
     * Sets the lastName of this User. The lastName field corresponds to the
     * database column userdb.userdb.user.lastName.
     * 
     * @param lastName to set of this User
     * @return         this User instance
     */
    User setLastName(String lastName);
    
    /**
     * Sets the email of this User. The email field corresponds to the database
     * column userdb.userdb.user.email.
     * 
     * @param email to set of this User
     * @return      this User instance
     */
    User setEmail(String email);
    
    /**
     * Sets the password of this User. The password field corresponds to the
     * database column userdb.userdb.user.password.
     * 
     * @param password to set of this User
     * @return         this User instance
     */
    User setPassword(String password);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        ID         ("id"),
        USERNAME   ("username"),
        FIRST_NAME ("firstName"),
        LAST_NAME  ("lastName"),
        EMAIL      ("email"),
        PASSWORD   ("password");
        
        private final String columnId;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "userdb";
        }
        
        @Override
        public String getSchemaId() {
            return "userdb";
        }
        
        @Override
        public String getTableId() {
            return "user";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}